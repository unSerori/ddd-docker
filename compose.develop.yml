services:  # コンポースするサービスたち

    go-api-srv:  # サービスの名前
        build:
            target: develop
            args: # ビルド時の変数
                CONTAINER_PASS_FOR_SSH_AGENT: ${CONTAINER_PASS_FOR_SSH_AGENT:-password}
        volumes:  # ボリュームの保持。
            - "./go-api/ddd:/root/ddd" # 開発環境
            - "./go-api/log/:/root/log/" # log
        ports: # ホストマシンのポートとコンテナのポートをマッピング 
            - "4561:4561"
        networks: # 定義したネットワークを利用
            - ssh_net # SSHしたいコンテナ間でのネットワーク

    mysql-db-srv: # サービスの名前
        ports: # ホストマシンのポートとコンテナのポートをマッピング 
            - "${MYSQL_DEVELOP_HOST_PORT}:3306" # テスト用にホストに繋げる # 3306がローカルのポートで使われている可能性がある

    ssh-agent-srv: # サービス名
        container_name: ssh-agent # コンテナ名
        build:  # ビルド設定
            context: ./ssh-agent # ビルドプロセスが実行されるパス。
            dockerfile: Dockerfile  # Dockerfileのパス。
        volumes: # ssh keyをマウント
            - type: bind # short syntaxは、もしホストOSにsourceがなかったら、"ディレクトリ"を作ってしまう
              source: "${HOST_SSH_PATH}"
              target: "/root/.ssh/"
        environment: # 環境変数
            CONTAINER_PASS_FOR_SSH_AGENT: ${CONTAINER_PASS_FOR_SSH_AGENT:-password}
        depends_on: # コンテナ起動順の関係 
            - go-api-srv # sshしたいコンテナを先に立ち上げる
        tty: true # コンテナ内で対話的操作を可能
        restart: always  # コンテナの再起動
        networks: # 定義したネットワークを利用
            - ssh_net # SSHしたいコンテナ間でのネットワーク

networks: # ネットワークの定義
    ssh_net: # SSHしたいコンテナ間でのネットワーク